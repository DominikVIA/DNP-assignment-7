@page "/AllPosts"
@using ApiContracts.Posts
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider

<h3>All Posts</h3>

@if (posts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Date posted</th>
            <th>Comments</th>
            <th>Likes</th>
            <th>Dislikes</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var post in posts)
        {
            <Modal @ref="modal"/>
            <tr>
                <td>@post.Title</td>
                <td>@post.DateCreated.ToString("dd/MM/yyyy HH:mm:ss")</td>
                <td>@(post.Comments != null ? post.Comments.Count : 0)</td>
                <td>@post.Likes</td>
                <td>@post.Dislikes</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => ShowPostModal(post)">View Details</button>
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-secondary btn-sm" @onclick="() => AddComment(post.Id)">Add Comment</button>
                        </Authorized>
                    </AuthorizeView>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Inject] public IPostService PostService { get; set; }

    private PostDto[] posts;
    private Modal modal = default!;
    private int? selectedPostId;

    private async Task ShowPostModal(PostDto post)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Post", post);
        parameters.TryGetValue("Post", out var value);
        // selectedPostId = post.Id;
        await modal.ShowAsync<PostModal>(title: "Post details", parameters: parameters);
    }

    private void AddComment(int postId)
    {
        NavManager.NavigateTo($"/AddComment/{postId}");
    }
    
    protected override async Task OnInitializedAsync()
    {
        posts = (await PostService.GetAllPostsAsync()).ToArray();
        await InvokeAsync(StateHasChanged);
    }
}