@page "/AddComment"
@page "/AddComment/{postId}"
@using ApiContracts.Comments
@using ApiContracts.Posts
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider

@if (_postDto != null)
{
<h3>Post being commented on: @_postDto.Title, @_postDto.Body, @_postDto.Author?.Username</h3>

<hr/>

<AuthorizeView>
    <Authorized>
        <h3>Adding comment:</h3>
        <ul>
            <li>
                <label for="body">The comment text</label>
                <input @bind="Body" id="body"/>
            </li>
        </ul>

        <Button class="mt-3" Color="ButtonColor.Success" Type="ButtonType.Button" @onclick="CreateComment">
            Add comment
        </Button>
    </Authorized>
    <NotAuthorized>
        <p>Please log in to add a comment.</p>
        <button @onclick='() => NavManager.NavigateTo("login")' class="btn btn-primary">Login</button>
    </NotAuthorized>
</AuthorizeView>
}
else
{
<p><em>Loading post details...</em></p>
}

@code {
[Inject] public IPostService PostService { get; set; }
[Inject] public ICommentService CommentService { get; set; }

[Parameter] public string? postId { get; set; }

private PostDto? _postDto;
private int AuthorId { get; set; }
private string Body { get; set; }

private async Task CreateComment()
{
await CommentService.AddCommentAsync(new CreateCommentDto
{
AuthorId = AuthorId,
Body = Body,
RespondingToId = _postDto!.Id
});
NavManager.NavigateTo("/AllPosts");
}

protected override async Task OnInitializedAsync()
{
try
{
_postDto = await PostService.GetSinglePostAsync(int.Parse(postId));

// Retrieve logged-in user's ID
var authState = await AuthProvider.GetAuthenticationStateAsync();
var loggedUser = authState.User;
if (loggedUser.Identity.IsAuthenticated)
{
AuthorId = int.Parse(loggedUser.FindFirst(c => c.Type == "Id")?.Value ?? "0");
}
}
catch (Exception e)
{
_postDto = null;
Console.WriteLine($"Error loading post: {e.Message}");
}
await InvokeAsync(StateHasChanged);
}
}
