@page "/CreatePost"
@using ApiContracts.Posts
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavManager
@inject IPostService PostService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager navMgr


<h3>Create Post</h3>

<AuthorizeView>
    <NotAuthorized>
        <p>You need to log in to create a post.</p>
        <button @onclick='() => navMgr.NavigateTo("login")' class="btn btn-primary">Login</button>

    </NotAuthorized>

    <Authorized>
        <div class="form-container">
            <div class="form-group">
                <label for="title">Title:</label>
                <input id="title" type="text" @bind="title" class="form-control" />
            </div>
            <div class="form-group">
                <label for="body">Body:</label>
                <textarea id="body" @bind="body" class="form-control"></textarea>
            </div>
            <button @onclick="CreatePostAsync" class="btn btn-primary">Create Post</button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
        <p style="color:red">@errorMessage</p>
        }
    </Authorized>
</AuthorizeView>

<style>
    .form-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
    .form-group {
        margin-bottom: 15px;
    }
    label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .form-control {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }
    .btn {
        padding: 10px 15px;
        font-size: 16px;
        cursor: pointer;
    }
    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }
    .btn-primary:hover {
        background-color: #0056b3;
    }
</style>

@code {
private string title = string.Empty;
private string body = string.Empty;
private string errorMessage = string.Empty;

private async Task CreatePostAsync()
{
errorMessage = string.Empty;

try
{
var authState = await AuthProvider.GetAuthenticationStateAsync();
var user = authState.User;
var authorId = int.Parse(user.FindFirst(c => c.Type == "Id")?.Value ?? "0");

var newPost = new CreatePostDto
{
Title = title,
Body = body,
AuthorId = authorId
};

await PostService.AddPostAsync(newPost);
NavManager.NavigateTo("/AllPosts");
}
catch (Exception ex)
{
errorMessage = $"Failed to create post: {ex.Message}";
}
}
}
